# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cosmology
else:
    import _cosmology

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class dp(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _cosmology.dp_swiginit(self, _cosmology.new_dp())
    __swig_destroy__ = _cosmology.delete_dp

    def assign(self, value):
        return _cosmology.dp_assign(self, value)

    def value(self):
        return _cosmology.dp_value(self)

    def cast(self):
        return _cosmology.dp_cast(self)

    @staticmethod
    def frompointer(t):
        return _cosmology.dp_frompointer(t)

# Register dp in _cosmology:
_cosmology.dp_swigregister(dp)
class cosmo(object):
    r"""Proxy of C++ cosmo class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Om0 = property(_cosmology.cosmo_Om0_get, _cosmology.cosmo_Om0_set, doc=r"""Om0 : double""")
    Omk = property(_cosmology.cosmo_Omk_get, _cosmology.cosmo_Omk_set, doc=r"""Omk : double""")
    w0 = property(_cosmology.cosmo_w0_get, _cosmology.cosmo_w0_set, doc=r"""w0 : double""")
    wa = property(_cosmology.cosmo_wa_get, _cosmology.cosmo_wa_set, doc=r"""wa : double""")
    Omb = property(_cosmology.cosmo_Omb_get, _cosmology.cosmo_Omb_set, doc=r"""Omb : double""")
    hval = property(_cosmology.cosmo_hval_get, _cosmology.cosmo_hval_set, doc=r"""hval : double""")
    th = property(_cosmology.cosmo_th_get, _cosmology.cosmo_th_set, doc=r"""th : double""")
    s8 = property(_cosmology.cosmo_s8_get, _cosmology.cosmo_s8_set, doc=r"""s8 : double""")
    nspec = property(_cosmology.cosmo_nspec_get, _cosmology.cosmo_nspec_set, doc=r"""nspec : double""")
    ximax = property(_cosmology.cosmo_ximax_get, _cosmology.cosmo_ximax_set, doc=r"""ximax : double""")
    cfac = property(_cosmology.cosmo_cfac_get, _cosmology.cosmo_cfac_set, doc=r"""cfac : double""")

    def __init__(self):
        r"""__init__(cosmo self) -> cosmo"""
        _cosmology.cosmo_swiginit(self, _cosmology.new_cosmo())
    __swig_destroy__ = _cosmology.delete_cosmo

# Register cosmo in _cosmology:
_cosmology.cosmo_swigregister(cosmo)
class gf_par(object):
    r"""Proxy of C++ gf_par class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Omega0 = property(_cosmology.gf_par_Omega0_get, _cosmology.gf_par_Omega0_set, doc=r"""Omega0 : double""")
    OmegaL = property(_cosmology.gf_par_OmegaL_get, _cosmology.gf_par_OmegaL_set, doc=r"""OmegaL : double""")
    w0 = property(_cosmology.gf_par_w0_get, _cosmology.gf_par_w0_set, doc=r"""w0 : double""")
    wa = property(_cosmology.gf_par_wa_get, _cosmology.gf_par_wa_set, doc=r"""wa : double""")

    def __init__(self):
        r"""__init__(gf_par self) -> gf_par"""
        _cosmology.gf_par_swiginit(self, _cosmology.new_gf_par())
    __swig_destroy__ = _cosmology.delete_gf_par

# Register gf_par in _cosmology:
_cosmology.gf_par_swigregister(gf_par)
class march_params(object):
    r"""Proxy of C++ march_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    fac = property(_cosmology.march_params_fac_get, _cosmology.march_params_fac_set, doc=r"""fac : double""")

    def __init__(self):
        r"""__init__(march_params self) -> march_params"""
        _cosmology.march_params_swiginit(self, _cosmology.new_march_params())
    __swig_destroy__ = _cosmology.delete_march_params

# Register march_params in _cosmology:
_cosmology.march_params_swigregister(march_params)
class qk_params(object):
    r"""Proxy of C++ qk_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.qk_params_cptr_get, _cosmology.qk_params_cptr_set, doc=r"""cptr : p.cosmology""")
    k = property(_cosmology.qk_params_k_get, _cosmology.qk_params_k_set, doc=r"""k : p.double""")
    z = property(_cosmology.qk_params_z_get, _cosmology.qk_params_z_set, doc=r"""z : p.double""")
    xmax = property(_cosmology.qk_params_xmax_get, _cosmology.qk_params_xmax_set, doc=r"""xmax : p.double""")
    opt = property(_cosmology.qk_params_opt_get, _cosmology.qk_params_opt_set, doc=r"""opt : int""")

    def __init__(self):
        r"""__init__(qk_params self) -> qk_params"""
        _cosmology.qk_params_swiginit(self, _cosmology.new_qk_params())
    __swig_destroy__ = _cosmology.delete_qk_params

# Register qk_params in _cosmology:
_cosmology.qk_params_swigregister(qk_params)
class projwpk_params(object):
    r"""Proxy of C++ projwpk_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.projwpk_params_cptr_get, _cosmology.projwpk_params_cptr_set, doc=r"""cptr : p.cosmology""")
    R = property(_cosmology.projwpk_params_R_get, _cosmology.projwpk_params_R_set, doc=r"""R : p.double""")
    z = property(_cosmology.projwpk_params_z_get, _cosmology.projwpk_params_z_set, doc=r"""z : p.double""")
    fkai = property(_cosmology.projwpk_params_fkai_get, _cosmology.projwpk_params_fkai_set, doc=r"""fkai : p.double""")

    def __init__(self):
        r"""__init__(projwpk_params self) -> projwpk_params"""
        _cosmology.projwpk_params_swiginit(self, _cosmology.new_projwpk_params())
    __swig_destroy__ = _cosmology.delete_projwpk_params

# Register projwpk_params in _cosmology:
_cosmology.projwpk_params_swigregister(projwpk_params)
class cDel_params(object):
    r"""Proxy of C++ cDel_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.cDel_params_cptr_get, _cosmology.cDel_params_cptr_set, doc=r"""cptr : p.cosmology""")
    cvir = property(_cosmology.cDel_params_cvir_get, _cosmology.cDel_params_cvir_set, doc=r"""cvir : p.double""")
    omegaz = property(_cosmology.cDel_params_omegaz_get, _cosmology.cDel_params_omegaz_set, doc=r"""omegaz : p.double""")
    dcz = property(_cosmology.cDel_params_dcz_get, _cosmology.cDel_params_dcz_set, doc=r"""dcz : p.double""")
    Delta = property(_cosmology.cDel_params_Delta_get, _cosmology.cDel_params_Delta_set, doc=r"""Delta : p.double""")

    def __init__(self):
        r"""__init__(cDel_params self) -> cDel_params"""
        _cosmology.cDel_params_swiginit(self, _cosmology.new_cDel_params())
    __swig_destroy__ = _cosmology.delete_cDel_params

# Register cDel_params in _cosmology:
_cosmology.cDel_params_swigregister(cDel_params)

def dTime(arg1, arg2):
    r"""dTime(double arg1, void * arg2) -> double"""
    return _cosmology.dTime(arg1, arg2)

def dChi(arg1, arg2):
    r"""dChi(double arg1, void * arg2) -> double"""
    return _cosmology.dChi(arg1, arg2)

def dneffint(arg1, arg2):
    r"""dneffint(double arg1, void * arg2) -> double"""
    return _cosmology.dneffint(arg1, arg2)

def dCint(arg1, arg2):
    r"""dCint(double arg1, void * arg2) -> double"""
    return _cosmology.dCint(arg1, arg2)

def findmvir(arg1, arg2):
    r"""findmvir(double arg1, void * arg2) -> double"""
    return _cosmology.findmvir(arg1, arg2)

def findksig(arg1, arg2):
    r"""findksig(double arg1, void * arg2) -> double"""
    return _cosmology.findksig(arg1, arg2)

def dxi_L(arg1, arg2):
    r"""dxi_L(double arg1, void * arg2) -> double"""
    return _cosmology.dxi_L(arg1, arg2)

def dPktest_L(arg1, arg2):
    r"""dPktest_L(double arg1, void * arg2) -> double"""
    return _cosmology.dPktest_L(arg1, arg2)

def dPktest_NL(arg1, arg2):
    r"""dPktest_NL(double arg1, void * arg2) -> double"""
    return _cosmology.dPktest_NL(arg1, arg2)

def dPktest_zetaNL(arg1, arg2):
    r"""dPktest_zetaNL(double arg1, void * arg2) -> double"""
    return _cosmology.dPktest_zetaNL(arg1, arg2)

def dxi_NL(arg1, arg2):
    r"""dxi_NL(double arg1, void * arg2) -> double"""
    return _cosmology.dxi_NL(arg1, arg2)

def E_sq(arg1, arg2):
    r"""E_sq(gf_par arg1, double & arg2) -> double"""
    return _cosmology.E_sq(arg1, arg2)

def dE_sqdz(arg1, arg2):
    r"""dE_sqdz(gf_par arg1, double & arg2) -> double"""
    return _cosmology.dE_sqdz(arg1, arg2)

def getall(arg1, arg2, arg3, arg4, arg5):
    r"""getall(gf_par arg1, double & arg2, double & arg3, double & arg4, double & arg5)"""
    return _cosmology.getall(arg1, arg2, arg3, arg4, arg5)

def d2lnE_sqdz2(arg1, arg2):
    r"""d2lnE_sqdz2(gf_par arg1, double & arg2) -> double"""
    return _cosmology.d2lnE_sqdz2(arg1, arg2)

def gf_func(arg1, arg2, arg3, arg4):
    r"""gf_func(double arg1, double const [] arg2, double [] arg3, void * arg4) -> int"""
    return _cosmology.gf_func(arg1, arg2, arg3, arg4)

def gf_jac(arg1, arg2, arg3, arg4, arg5):
    r"""gf_jac(double arg1, double const [] arg2, double * arg3, double [] arg4, void * arg5) -> int"""
    return _cosmology.gf_jac(arg1, arg2, arg3, arg4, arg5)

def findrz(x, params):
    r"""findrz(double x, void * params) -> double"""
    return _cosmology.findrz(x, params)

def findzmax(x, params):
    r"""findzmax(double x, void * params) -> double"""
    return _cosmology.findzmax(x, params)

def dwpnl(x, params):
    r"""dwpnl(double x, void * params) -> double"""
    return _cosmology.dwpnl(x, params)

def dwpl(x, params):
    r"""dwpl(double x, void * params) -> double"""
    return _cosmology.dwpl(x, params)

def dQk(arg1, arg2):
    r"""dQk(double arg1, void * arg2) -> double"""
    return _cosmology.dQk(arg1, arg2)

def dxinlbar(arg1, arg2):
    r"""dxinlbar(double arg1, void * arg2) -> double"""
    return _cosmology.dxinlbar(arg1, arg2)

def dxinlbarbar(arg1, arg2):
    r"""dxinlbarbar(double arg1, void * arg2) -> double"""
    return _cosmology.dxinlbarbar(arg1, arg2)

def dxilbar(arg1, arg2):
    r"""dxilbar(double arg1, void * arg2) -> double"""
    return _cosmology.dxilbar(arg1, arg2)

def dxilbarbar(arg1, arg2):
    r"""dxilbarbar(double arg1, void * arg2) -> double"""
    return _cosmology.dxilbarbar(arg1, arg2)

def dwpnl_kaiser(arg1, arg2):
    r"""dwpnl_kaiser(double arg1, void * arg2) -> double"""
    return _cosmology.dwpnl_kaiser(arg1, arg2)

def dwpl_kaiser(arg1, arg2):
    r"""dwpl_kaiser(double arg1, void * arg2) -> double"""
    return _cosmology.dwpl_kaiser(arg1, arg2)

def dvar_G(x, params):
    r"""dvar_G(double x, void * params) -> double"""
    return _cosmology.dvar_G(x, params)

def dvar_TH(x, params):
    r"""dvar_TH(double x, void * params) -> double"""
    return _cosmology.dvar_TH(x, params)

def findcmarch(arg1, arg2):
    r"""findcmarch(double arg1, void * arg2) -> double"""
    return _cosmology.findcmarch(arg1, arg2)

def findcDel(arg1, arg2):
    r"""findcDel(double arg1, void * arg2) -> double"""
    return _cosmology.findcDel(arg1, arg2)

def findcDelp(arg1, arg2):
    r"""findcDelp(double arg1, void * arg2) -> double"""
    return _cosmology.findcDelp(arg1, arg2)
class cosmology(object):
    r"""Proxy of C++ cosmology class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _cosmology.delete_cosmology

    def __init__(self, *args):
        r"""
        __init__(cosmology self) -> cosmology
        __init__(cosmology self, double om0, double omk, double w0, double wa, double omb, double h, double theta, double sigma8, double ns, double ximax, double cfac) -> cosmology
        __init__(cosmology self, cosmo arg2) -> cosmology
        Initializes cosmology object 

        :Parameters:

        -   Omega0 : Matter density parameter
        -   OmegaK : Curvature parameter
        -   w0 : Dark energy equation of state parameter
        -   wa : Dark energy equation of state parameter
        -   Omegab : Baryon density parameter
        -   h : Hubble parameter
        -   ThetaCMB : CMB temperature
        -   sigma8 : sigma8
        -   ns : power spectrum index
        -   psi : Parameter psi defined in van den Bosch 2013, only relevant for halo model calculation
        -   cfac : Constant multiplicative factor for the c-M relation

        :Returns:

        -   Cosmology object

            Without any inputs, initializes to flat WMAP3 LCDM cosmology, cfac=1.0, ximax=log10(8.0).

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> help(a)


        """
        _cosmology.cosmology_swiginit(self, _cosmology.new_cosmology(*args))

    def cosmo_free(self):
        r"""
        cosmo_free(cosmology self)
        Frees all memory associated with cosmology object

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.cosmo_free()


        """
        return _cosmology.cosmology_cosmo_free(self)

    def Dcofz(self, z):
        r"""
        Dcofz(cosmology self, double z) -> double
        Comoving distance as a function of redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Comoving distance (hinv Mpc)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Dcofz(0.5)


        """
        return _cosmology.cosmology_Dcofz(self, z)

    def Dlofz(self, z):
        r"""
        Dlofz(cosmology self, double z) -> double
        Luminosity distance as a function of redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Luminosity distance (hinv Mpc)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Dlofz(0.5)


        """
        return _cosmology.cosmology_Dlofz(self, z)

    def Daofz(self, z):
        r"""
        Daofz(cosmology self, double z) -> double
        Angular diameter distance as a function of redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Angular diameter distance (hinv Mpc)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Daofz(0.5)


        """
        return _cosmology.cosmology_Daofz(self, z)

    def Daofzlh(self, zl, zh):
        r"""
        Daofzlh(cosmology self, double zl, double zh) -> double
        Angular diameter distance as a function of redshift of lens and source

        :Parameters:

        -   zl : Redshift of lens
        -   zh : Redshift of source

        :Returns:

        -   Angular diameter distance between two redshifts (hinv Mpc)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Daofzlh(0.5,1.0)


        """
        return _cosmology.cosmology_Daofzlh(self, zl, zh)

    def growthfactor_num(self, z):
        r"""
        growthfactor_num(cosmology self, double z) -> double
        Growth factor as a function of redshift (normalized to unity at redshift zero)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Growth factor at redshift z

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.growthfactor_num(0.5)


        """
        return _cosmology.cosmology_growthfactor_num(self, z)

    def dlnDdln1pz(self, z):
        r"""
        dlnDdln1pz(cosmology self, double z) -> double
        Negative of the logarithmic derivative of growth factor with scale factor

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Negative of the logarithmic derivative of growth factor with scale factor

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.dlnDdln1pz(0.5)


        """
        return _cosmology.cosmology_dlnDdln1pz(self, z)

    def Omega(self, z):
        r"""
        Omega(cosmology self, double z) -> double
        Matter density parameter at redshift z

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Matter density parameter at redshift z

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Omega(0.5)


        """
        return _cosmology.cosmology_Omega(self, z)

    def Omegaw(self, z):
        r"""
        Omegaw(cosmology self, double z) -> double
        Dark energy density parameter at redshift z

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Dark energy density parameter at redshift z

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Omegaw(0.5)


        """
        return _cosmology.cosmology_Omegaw(self, z)

    def Delta_crit(self, z):
        r"""
        Delta_crit(cosmology self, double z) -> double
        Virial density contrast at redshift z a'la Bryan and Norman '98

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Virial density contrast (with respect to critical density at redshift z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Delta_crit(0.5)


        """
        return _cosmology.cosmology_Delta_crit(self, z)

    def set_optmf(self, opt):
        r"""
        set_optmf(cosmology self, int opt)
        Set mass function option

        :Parameters:

        -   option = 1: Tinker et al. 2010 mass function (well tested and consistent
            with the bias prescription
        -   option = 2: Sheth Tormen mass function
        -   option = 3: Bhattacharya et al. 2010 mass function

        :Returns:

        -   Set mass function choice (default is equal to 1 if this function is not called)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.set_optmf(1)


        """
        return _cosmology.cosmology_set_optmf(self, opt)

    def set_takahashi(self, opt):
        r"""set_takahashi(cosmology self, bool opt)"""
        return _cosmology.cosmology_set_takahashi(self, opt)

    def Delta2_L_num(self, k, z):
        r"""
        Delta2_L_num(cosmology self, double k, double z) -> double
        Power per logarithmic k interval in the linear matter power spectrum Delta^2(k,z)

        :Parameters:

        -   k: Wavenumber (in h Mpc^{-1})
        -   z: Redshift

        :Returns:

        -   Delta^2(k,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Delta2_L_num(0.1,0.0)


        """
        return _cosmology.cosmology_Delta2_L_num(self, k, z)

    def Delta2_NL_num(self, k, z):
        r"""
        Delta2_NL_num(cosmology self, double k, double z) -> double
        Power per logarithmic k interval in the nonlinear matter power spectrum Delta^2_NL(k,z)

        :Parameters:

        -   k: Wavenumber (in h Mpc^{-1})
        -   z: Redshift

        :Returns:

        -   Nonlinear Delta^2(k,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Delta2_NL_num(0.1,0.0)


        """
        return _cosmology.cosmology_Delta2_NL_num(self, k, z)

    def xi_L_num(self, k, z):
        r"""
        xi_L_num(cosmology self, double k, double z) -> double
        Linear matter correlation function

        :Parameters:

        -   r: Scale (in hinv Mpc)
        -   z: Redshift

        :Returns:

        -   Linear matter correlation function (r,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_L_num(0.1,0.0)


        """
        return _cosmology.cosmology_xi_L_num(self, k, z)

    def xi_NL_num(self, k, z):
        r"""
        xi_NL_num(cosmology self, double k, double z) -> double
        Non-Linear matter correlation function

        :Parameters:

        -   r: Scale (in hinv Mpc)
        -   z: Redshift

        :Returns:

        -   Non-linear matter correlation function (r,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_NL_num(0.1,0.0)


        """
        return _cosmology.cosmology_xi_NL_num(self, k, z)

    def nofm(self, M, z):
        r"""
        nofm(cosmology self, double M, double z) -> double
        Mass function as a function of mass and redshift

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        -   dN(>M)/dM of halos, where N(>M) is the cumulative number density of halos with mass larger than M, commonly referred to as mass function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.nofm(1e12,0.0)


        """
        return _cosmology.cosmology_nofm(self, M, z)

    def MF_TI09(self, M, z, Deltac):
        r"""MF_TI09(cosmology self, double M, double z, double Deltac) -> double"""
        return _cosmology.cosmology_MF_TI09(self, M, z, Deltac)

    def bias(self, M, z):
        r"""
        bias(cosmology self, double M, double z) -> double
        Halo bias function as a function of mass and redshift

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        -   Large scale halo bias

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.bias(1e12,0.0)


        """
        return _cosmology.cosmology_bias(self, M, z)

    def varM_TH_num(self, M, z):
        r"""
        varM_TH_num(cosmology self, double M, double z) -> double
        Variance of fluctuations on a given mass scale [sigma^2(M,z)]

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        -   Variance of fluctuations when density field is smoothed on the lagrangian radius corresponding to a given mass scale 

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.varM_TH_num(1e12,0.0)


        """
        return _cosmology.cosmology_varM_TH_num(self, M, z)

    def varM_TH_num_deriv(self, M, z):
        r"""
        varM_TH_num_deriv(cosmology self, double M, double z) -> double
        dln sigma^2/dln M

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        - dln sigma^2/dln M  (M,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.varM_TH_num_deriv(1e12,0.0)


        """
        return _cosmology.cosmology_varM_TH_num_deriv(self, M, z)

    def Nplus(self, M200, z):
        r"""
        Nplus(cosmology self, double M200, double z) -> double
        Number density of halos with mass above a given mass at a given redshift

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        - N(>M,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Nplus(1e12,0.0)


        """
        return _cosmology.cosmology_Nplus(self, M200, z)

    def getM(self, Nplus, z):
        r"""
        getM(cosmology self, double Nplus, double z) -> double
        Find mass such that halos with mass larger than it have a given number density at a given redshift

        :Parameters:

        -   Nplus: Target number density (in h^3 Mpc^{-3})
        -   z: Redshift

        :Returns:

        -   M: Mass (hinv Msun)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getM(1e-6,0.0)


        """
        return _cosmology.cosmology_getM(self, Nplus, z)

    def modelNFWhalo(self, M200, z):
        r"""
        modelNFWhalo(cosmology self, double M200, double z)
        Output the virial mass, physical virial radius, virial
        concentration of a halo, its physical radius with density
        contrast 200m and the corresponding concentration c200m
        given a mass M200m at redshift z

        :Parameters:

        -   M200m: Mass (hinv Msun) defined 200 times overdense with respect to the background
        -   z: Redshift

        :Returns:

        -   Mvir : The virial mass (hinv Msun)
        -   Rvir : The physical virial radius (hinv Mpc)
        -   cvir : The virial concentration
        -   R200m : The physical boundary of halo 200 times overdense with respect to background density (hinv Mpc)
        -   c200m : The concentration of halo 200 times overdense with respect to background density

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.modelNFWhalo(1e12,0.0)


        """
        return _cosmology.cosmology_modelNFWhalo(self, M200, z)

    def modelNFWhalo_com(self, M200, z):
        r"""
        modelNFWhalo_com(cosmology self, double M200, double z)
        Output the virial mass, comoving virial radius, virial
        concentration of a halo, its comoving radius with density
        contrast 200m and the corresponding concentration c200m
        given a mass M200m at redshift z

        :Parameters:

        -   M200m: Mass (hinv Msun) defined 200 times overdense with respect to the background
        -   z: Redshift

        :Returns:

        -   Mvir : The virial mass (hinv Msun)
        -   Rvir : The comoving virial radius (hinv Mpc)
        -   cvir : The virial concentration
        -   R200m : The comoving boundary of halo 200 times overdense with respect to background density (hinv Mpc)
        -   c200m : The concentration of halo 200 times overdense with respect to background density

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.modelNFWhalo_com(1e12,0.0)


        """
        return _cosmology.cosmology_modelNFWhalo_com(self, M200, z)

    def conc(self, Mvir, z):
        r"""
        conc(cosmology self, double Mvir, double z) -> double
        Concentration of halos

        :Parameters:

        -   Mvir: Virial mass (hinv Msun) 
        -   z: Redshift

        :Returns:

        -   cvir : The virial concentration

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.conc(1e12,0.0)


        """
        return _cosmology.cosmology_conc(self, Mvir, z)

    def Eofz(self, z):
        r"""
        Eofz(cosmology self, double z) -> double
        Returns the cosmological expansion function E(z)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Eofz: Expansion function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Eofz(0.5)
            1.28111279753

        """
        return _cosmology.cosmology_Eofz(self, z)

    def setnew_z(self, z):
        r"""
        setnew_z(cosmology self, double z)
        Reset the global redshift at which many of the splines in the cosmology code are initialized. This is rarely used function.

        :Parameters:

        -   z : Redshift

        :Returns:

        -   None: None

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.setnew_z(0.5)
            1

        """
        return _cosmology.cosmology_setnew_z(self, z)

    def gets8(self):
        r"""
        gets8(cosmology self) -> double
        Output value of sigma8

        :Parameters:

        -   None : No inputs

        :Returns:

        -   sigma8 : sigma8

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.gets8()

        """
        return _cosmology.cosmology_gets8(self)

    def getOmb(self):
        r"""
        getOmb(cosmology self) -> double
        Output value of Omegab

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   Omegab : Baryon density parameter

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getOmb()

        """
        return _cosmology.cosmology_getOmb(self)

    def geth(self):
        r"""
        geth(cosmology self) -> double
        Output value of h value

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   h : Hubble parameter

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.geth()

        """
        return _cosmology.cosmology_geth(self)

    def getns(self):
        r"""
        getns(cosmology self) -> double
        Output value of spectral index

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   ns : Spectral index of initial density fluctuations

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getns()

        """
        return _cosmology.cosmology_getns(self)

    def getxinlzetamax(self):
        r"""
        getxinlzetamax(cosmology self) -> double
        Returns the value of psi from van den Bosch 2013

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   psi : Psi defined in van den Bosch 2013

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getxinlzetamax()

        """
        return _cosmology.cosmology_getxinlzetamax(self)

    def get_cfac(self):
        r"""
        get_cfac(cosmology self) -> double
        Returns factor multiplying all concentrations calculated by the code

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   cfac : Factor multiplying all concentrations output by the code

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_cfac()

        """
        return _cosmology.cosmology_get_cfac(self)

    def set_cfac(self, cfac):
        r"""
        set_cfac(cosmology self, double cfac) -> double
        Sets factor multiplying all concentrations calculated by the code

        :Parameters:

        -   cfac : Factor multiplying all concentrations output by the code

        :Returns:

        -   None : None

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.set_cfac(1.0)

        """
        return _cosmology.cosmology_set_cfac(self, cfac)

    def getzmax(self, xL):
        r"""
        getzmax(cosmology self, double xL) -> double
        Get the maximum redshift to which a galaxy can be observed by SDSS spectroscopic survey

        :Parameters:

        -   xL: Luminosity in h^{-2} Lsun

        :Returns:

        -   z : Redshift

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getzmax(1e12)

        """
        return _cosmology.cosmology_getzmax(self, xL)

    def getLmin(self, z, L1):
        r"""
        getLmin(cosmology self, double z, double L1) -> double
        Get the minimum luminosity of galaxies that can be observed by SDSS spectroscopic survey at a given redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   xL: Luminosity in h^{-2} Lsun

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getLmin(0.1)

        """
        return _cosmology.cosmology_getLmin(self, z, L1)

    def Time(self, z):
        r"""
        Time(cosmology self, double z) -> double
        Get the time in units of 1/(H_0 km/s/Mpc/yr)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Time : in units of 1/(H_0 km/s/Mpc/yr)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Time(0.1)

        """
        return _cosmology.cosmology_Time(self, z)

    def Lookback(self, z):
        r"""
        Lookback(cosmology self, double z) -> double
        Get the lookback time in units of 1/(H_0 km/s/Mpc/yr)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Lookback Time : in units of 1/(H_0 km/s/Mpc/yr)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Lookback(0.1)

        """
        return _cosmology.cosmology_Lookback(self, z)

    def wpnl(self, z, rad, projmax):
        r"""
        wpnl(cosmology self, double z, double rad, double projmax) -> double
        Get the projected non-linear matter correlation function

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit

        :Returns:

        -   wpnl : Projected non-linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpnl(0.1,0.1,100.0)

        """
        return _cosmology.cosmology_wpnl(self, z, rad, projmax)

    def wpl(self, z, rad, projmax):
        r"""
        wpl(cosmology self, double z, double rad, double projmax) -> double
        Get the projected linear matter correlation function

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit

        :Returns:

        -   wpl : Projected linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpl(0.1,0.1,100.0)

        """
        return _cosmology.cosmology_wpl(self, z, rad, projmax)

    def wpnl_kaiser(self, z, rad, projmax, fkai):
        r"""
        wpnl_kaiser(cosmology self, double z, double rad, double projmax, double fkai) -> double
        Get the projected non-linear matter correlation function accounting for Kaiser effects

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit
        -   fkai : Kaiser factor f/b

        :Returns:

        -   wpnl_kaiser : Projected non-linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpnl_kaiser(0.1,0.1,100.0,1.0)

        """
        return _cosmology.cosmology_wpnl_kaiser(self, z, rad, projmax, fkai)

    def xi_NL_kaiser(self, r, z, mu, fkai):
        r"""
        xi_NL_kaiser(cosmology self, double r, double z, double mu, double fkai) -> double
        Get the non-linear matter correlation function accounting for Kaiser effects

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   mu : Cosine of angle between separation vector and line of sight
        -   fkai : Kaiser factor f/b

        :Returns:

        -   xi_nl_kaiser : Non-linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_nl_kaiser(0.1,0.1,0.5,1.0)

        """
        return _cosmology.cosmology_xi_NL_kaiser(self, r, z, mu, fkai)

    def wpl_kaiser(self, z, rad, projmax, fkai):
        r"""
        wpl_kaiser(cosmology self, double z, double rad, double projmax, double fkai) -> double
        Get the projected linear matter correlation function accounting for Kaiser effect

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit
        -   fkai : Kaiser factor f/b

        :Returns:

        -   wpl : Projected linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpl_kaiser(0.1,0.1,100.0,1.0)

        """
        return _cosmology.cosmology_wpl_kaiser(self, z, rad, projmax, fkai)

    def xi_L_kaiser(self, r, z, mu, fkai):
        r"""
        xi_L_kaiser(cosmology self, double r, double z, double mu, double fkai) -> double
        Get the linear matter correlation function accounting for Kaiser effect

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   mu : Cosine of angle between separation vector and line of sight
        -   fkai : Kaiser factor f/b

        :Returns:

        -   xi_l : Linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_L_kaiser(0.1,0.1,0.5,1.0)

        """
        return _cosmology.cosmology_xi_L_kaiser(self, r, z, mu, fkai)

    def renew(self, p):
        r"""renew(cosmology self, cosmo p)"""
        return _cosmology.cosmology_renew(self, p)

    def rsound(self):
        r"""
        rsound(cosmology self) -> double
        Get the comoving sound horizon at the drag epoch

        :Parameters:

        -   None : None

        :Returns:

        -   rsound : Comoving sound horizon at drag epoch a'la Eisenstein and Hu 98

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.rsound()

        """
        return _cosmology.cosmology_rsound(self)

    def get_deltapi(self, z1, z2):
        r"""
        get_deltapi(cosmology self, double z1, double z2) -> double
        Calculate the line of sight separation between two galaxies

        :Parameters:

        -   z1 : Redshift
        -   z2 : Redshift

        :Returns:

        -   Line of sight separation between two galaxies

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_deltapi(0.0, 0.2)


        """
        return _cosmology.cosmology_get_deltapi(self, z1, z2)

    def get_sinsqang(self, x1, y1, z1, x2, y2, z2):
        r"""
        get_sinsqang(cosmology self, double x1, double y1, double z1, double x2, double y2, double z2) -> double
        Calculate the square of the sin of the angle between two galaxies

        :Parameters:

        -   x1 : Cartesian x for the unit vector pointing at Galaxy 1
        -   y1 : Cartesian y for the unit vector pointing at Galaxy 1
        -   z1 : Cartesian z for the unit vector pointing at Galaxy 1
        -   x2 : Cartesian x for the unit vector pointing at Galaxy 2
        -   y2 : Cartesian y for the unit vector pointing at Galaxy 2
        -   z2 : Cartesian z for the unit vector pointing at Galaxy 2

        :Returns:

        -   Square of the sin of the angle between two galaxies

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_sinsqang(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)


        """
        return _cosmology.cosmology_get_sinsqang(self, x1, y1, z1, x2, y2, z2)

    def get_logrp(self, x1, y1, z1, x2, y2, z2, Chisq):
        r"""
        get_logrp(cosmology self, double x1, double y1, double z1, double x2, double y2, double z2, double Chisq) -> double
        Calculate the projected separation between two galaxies

        :Parameters:

        -   x1 : Cartesian x for the unit vector pointing at Galaxy 1
        -   y1 : Cartesian y for the unit vector pointing at Galaxy 1
        -   z1 : Cartesian z for the unit vector pointing at Galaxy 1
        -   x2 : Cartesian x for the unit vector pointing at Galaxy 2
        -   y2 : Cartesian y for the unit vector pointing at Galaxy 2
        -   z2 : Cartesian z for the unit vector pointing at Galaxy 2

        :Returns:

        -   Log of projected separation between two galaxies

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_logrp(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)


        """
        return _cosmology.cosmology_get_logrp(self, x1, y1, z1, x2, y2, z2, Chisq)

    def getmstar(self):
        r"""getmstar(cosmology self) -> double"""
        return _cosmology.cosmology_getmstar(self)

    def pevolve_fixed(self, cdel, opt, z, zstart):
        r"""
        pevolve_fixed(cosmology self, double cdel, int opt, double z, double zstart)
        Pseudo-evolution estimate for the mass (backward or forward):
        Assume that the physical density profile of a peak with
        concentration cdel at redshift zstart defined to be of type
        opt 
        remains fixed. Calculate its concentration at redshift z, and
        the ratio of its mass to the mass at redshift zstart.

        :Parameters:

        -   cdel : concentration of halo 
        -   opt : opt=1: Defined with respect to background density, opt=2: Defined to be virial mass, opt=3: Defined with respect to critical density
        -   z: Redshift
        -   zstart : The reference redshift at which the halo density profile is fixed

        :Returns:

        -   cdelz : The concentration of the halo at redshift z
        -   fdelz : The ratio of the mass at redshift z to the mass at redshift zstart

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.pevolve_fixed(12.0,1,1.0,0.0)
            [5.019071157921484, 0.585350923353302]

        """
        return _cosmology.cosmology_pevolve_fixed(self, cdel, opt, z, zstart)

    def getcDel(self, cvir, z, Delta):
        r"""
        getcDel(cosmology self, double cvir, double z, double Delta) -> double
        Output the concentration, cDelta, of a halo defined as Delta
        with respect to the background density at redshift z and which
        has virial concentration equal to cvir.

        :Parameters:

        -   cvir : The virial concentration
        -   z : Redshift
        -   Del : The overdensity with respect to the background

        :Returns:

        -   cDelta : The concentration of this halo when defined as Del times overdense with respect to the background

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getcDel(10.0,0.0,200.)
            12.6784160959

        """
        return _cosmology.cosmology_getcDel(self, cvir, z, Delta)

    def getRvirfromMvir(self, Mvir, z):
        r"""
        getRvirfromMvir(cosmology self, double Mvir, double z) -> double
        Compute the comoving virial radius from the virial mass

        :Parameters:

        -   Mvir : Virial mass
        -   z: Redshift

        :Returns:

        -   Rvir : The comoving virial radius

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getRvirfromMvir(1.E12, 0.0)

        """
        return _cosmology.cosmology_getRvirfromMvir(self, Mvir, z)

    def getRDelfromMDel(self, Mdel, z, Del):
        r"""
        getRDelfromMDel(cosmology self, double Mdel, double z, double Del) -> double
        Compute the comoving halo radius from the halo mass with overdensity Delta

        :Parameters:

        -   MDel : Halo mass
        -   z: Redshift
        -   Del: Overdensity

        :Returns:

        -   RDel : The comoving halo boundary

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getRDelfromMDel(1.E12, 0.0, 200.0)

        """
        return _cosmology.cosmology_getRDelfromMDel(self, Mdel, z, Del)

    def getcDeltap_from_cDelta(self, cDelta, Delta, Deltap):
        r"""
        getcDeltap_from_cDelta(cosmology self, double cDelta, double Delta, double Deltap) -> double
        Output the concentration, cDeltap, of a NFW halo defined as Deltap with respect
        to the background density and which has concentration with respect to another
        definition, Delta, equal to cDelta.

        :Parameters:

        -   cDelta : The virial concentration
        -   Delta : The overdensity with respect to the background
        -   Deltap : The new overdensity with respect to the background at which to
            output concentration

        :Returns:

        -   cDeltap : The concentration of this halo when defined as Deltap times overdense with respect to the background

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getcDeltap_from_cDelta(30.0, 200.0, 360.0)

        """
        return _cosmology.cosmology_getcDeltap_from_cDelta(self, cDelta, Delta, Deltap)

    def bias_TI10_wDelta(self, M, z, Delta):
        r"""bias_TI10_wDelta(cosmology self, double M, double z, double Delta) -> double"""
        return _cosmology.cosmology_bias_TI10_wDelta(self, M, z, Delta)

    def MF_Evrard(self, arg2, arg3):
        r"""MF_Evrard(cosmology self, double arg2, double arg3) -> double"""
        return _cosmology.cosmology_MF_Evrard(self, arg2, arg3)

    def MF_Jenkins(self, arg2, arg3):
        r"""MF_Jenkins(cosmology self, double arg2, double arg3) -> double"""
        return _cosmology.cosmology_MF_Jenkins(self, arg2, arg3)

    def printQk(self, arg2):
        r"""printQk(cosmology self, double arg2)"""
        return _cosmology.cosmology_printQk(self, arg2)

    def setdarkemu(self, arg2):
        r"""setdarkemu(cosmology self, bool arg2)"""
        return _cosmology.cosmology_setdarkemu(self, arg2)

# Register cosmology in _cosmology:
_cosmology.cosmology_swigregister(cosmology)
class np_params(object):
    r"""Proxy of C++ np_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.np_params_cptr_get, _cosmology.np_params_cptr_set, doc=r"""cptr : p.cosmology""")
    z = property(_cosmology.np_params_z_get, _cosmology.np_params_z_set, doc=r"""z : p.double""")
    Np = property(_cosmology.np_params_Np_get, _cosmology.np_params_Np_set, doc=r"""Np : p.double""")

    def __init__(self):
        r"""__init__(np_params self) -> np_params"""
        _cosmology.np_params_swiginit(self, _cosmology.new_np_params())
    __swig_destroy__ = _cosmology.delete_np_params

# Register np_params in _cosmology:
_cosmology.np_params_swigregister(np_params)
class c_params(object):
    r"""Proxy of C++ c_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.c_params_cptr_get, _cosmology.c_params_cptr_set, doc=r"""cptr : p.cosmology""")

    def __init__(self):
        r"""__init__(c_params self) -> c_params"""
        _cosmology.c_params_swiginit(self, _cosmology.new_c_params())
    __swig_destroy__ = _cosmology.delete_c_params

# Register c_params in _cosmology:
_cosmology.c_params_swigregister(c_params)
class coll_params(object):
    r"""Proxy of C++ coll_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.coll_params_cptr_get, _cosmology.coll_params_cptr_set, doc=r"""cptr : p.cosmology""")
    sig = property(_cosmology.coll_params_sig_get, _cosmology.coll_params_sig_set, doc=r"""sig : p.double""")

    def __init__(self):
        r"""__init__(coll_params self) -> coll_params"""
        _cosmology.coll_params_swiginit(self, _cosmology.new_coll_params())
    __swig_destroy__ = _cosmology.delete_coll_params

# Register coll_params in _cosmology:
_cosmology.coll_params_swigregister(coll_params)
class mvir_params(object):
    r"""Proxy of C++ mvir_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.mvir_params_cptr_get, _cosmology.mvir_params_cptr_set, doc=r"""cptr : p.cosmology""")
    m200 = property(_cosmology.mvir_params_m200_get, _cosmology.mvir_params_m200_set, doc=r"""m200 : p.double""")
    z = property(_cosmology.mvir_params_z_get, _cosmology.mvir_params_z_set, doc=r"""z : p.double""")

    def __init__(self):
        r"""__init__(mvir_params self) -> mvir_params"""
        _cosmology.mvir_params_swiginit(self, _cosmology.new_mvir_params())
    __swig_destroy__ = _cosmology.delete_mvir_params

# Register mvir_params in _cosmology:
_cosmology.mvir_params_swigregister(mvir_params)
class c200_params(object):
    r"""Proxy of C++ c200_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.c200_params_cptr_get, _cosmology.c200_params_cptr_set, doc=r"""cptr : p.cosmology""")
    cvir = property(_cosmology.c200_params_cvir_get, _cosmology.c200_params_cvir_set, doc=r"""cvir : p.double""")
    omegaz = property(_cosmology.c200_params_omegaz_get, _cosmology.c200_params_omegaz_set, doc=r"""omegaz : p.double""")
    dcz = property(_cosmology.c200_params_dcz_get, _cosmology.c200_params_dcz_set, doc=r"""dcz : p.double""")

    def __init__(self):
        r"""__init__(c200_params self) -> c200_params"""
        _cosmology.c200_params_swiginit(self, _cosmology.new_c200_params())
    __swig_destroy__ = _cosmology.delete_c200_params

# Register c200_params in _cosmology:
_cosmology.c200_params_swigregister(c200_params)
class cDelta_params(object):
    r"""Proxy of C++ cDelta_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cDelta = property(_cosmology.cDelta_params_cDelta_get, _cosmology.cDelta_params_cDelta_set, doc=r"""cDelta : p.double""")
    frac = property(_cosmology.cDelta_params_frac_get, _cosmology.cDelta_params_frac_set, doc=r"""frac : p.double""")

    def __init__(self):
        r"""__init__(cDelta_params self) -> cDelta_params"""
        _cosmology.cDelta_params_swiginit(self, _cosmology.new_cDelta_params())
    __swig_destroy__ = _cosmology.delete_cDelta_params

# Register cDelta_params in _cosmology:
_cosmology.cDelta_params_swigregister(cDelta_params)
class cvar_params(object):
    r"""Proxy of C++ cvar_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.cvar_params_cptr_get, _cosmology.cvar_params_cptr_set, doc=r"""cptr : p.cosmology""")
    R = property(_cosmology.cvar_params_R_get, _cosmology.cvar_params_R_set, doc=r"""R : p.double""")
    z = property(_cosmology.cvar_params_z_get, _cosmology.cvar_params_z_set, doc=r"""z : p.double""")
    psinit = property(_cosmology.cvar_params_psinit_get, _cosmology.cvar_params_psinit_set, doc=r"""psinit : p.bool""")

    def __init__(self):
        r"""__init__(cvar_params self) -> cvar_params"""
        _cosmology.cvar_params_swiginit(self, _cosmology.new_cvar_params())
    __swig_destroy__ = _cosmology.delete_cvar_params

# Register cvar_params in _cosmology:
_cosmology.cvar_params_swigregister(cvar_params)
class pk_params(object):
    r"""Proxy of C++ pk_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.pk_params_cptr_get, _cosmology.pk_params_cptr_set, doc=r"""cptr : p.cosmology""")
    k = property(_cosmology.pk_params_k_get, _cosmology.pk_params_k_set, doc=r"""k : p.double""")
    z = property(_cosmology.pk_params_z_get, _cosmology.pk_params_z_set, doc=r"""z : p.double""")

    def __init__(self):
        r"""__init__(pk_params self) -> pk_params"""
        _cosmology.pk_params_swiginit(self, _cosmology.new_pk_params())
    __swig_destroy__ = _cosmology.delete_pk_params

# Register pk_params in _cosmology:
_cosmology.pk_params_swigregister(pk_params)
class xi_params(object):
    r"""Proxy of C++ xi_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.xi_params_cptr_get, _cosmology.xi_params_cptr_set, doc=r"""cptr : p.cosmology""")
    r = property(_cosmology.xi_params_r_get, _cosmology.xi_params_r_set, doc=r"""r : p.double""")
    z = property(_cosmology.xi_params_z_get, _cosmology.xi_params_z_set, doc=r"""z : p.double""")

    def __init__(self):
        r"""__init__(xi_params self) -> xi_params"""
        _cosmology.xi_params_swiginit(self, _cosmology.new_xi_params())
    __swig_destroy__ = _cosmology.delete_xi_params

# Register xi_params in _cosmology:
_cosmology.xi_params_swigregister(xi_params)
class ksig_params(object):
    r"""Proxy of C++ ksig_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.ksig_params_cptr_get, _cosmology.ksig_params_cptr_set, doc=r"""cptr : p.cosmology""")
    z = property(_cosmology.ksig_params_z_get, _cosmology.ksig_params_z_set, doc=r"""z : p.double""")

    def __init__(self):
        r"""__init__(ksig_params self) -> ksig_params"""
        _cosmology.ksig_params_swiginit(self, _cosmology.new_ksig_params())
    __swig_destroy__ = _cosmology.delete_ksig_params

# Register ksig_params in _cosmology:
_cosmology.ksig_params_swigregister(ksig_params)
class projwp_params(object):
    r"""Proxy of C++ projwp_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.projwp_params_cptr_get, _cosmology.projwp_params_cptr_set, doc=r"""cptr : p.cosmology""")
    R = property(_cosmology.projwp_params_R_get, _cosmology.projwp_params_R_set, doc=r"""R : p.double""")
    z = property(_cosmology.projwp_params_z_get, _cosmology.projwp_params_z_set, doc=r"""z : p.double""")

    def __init__(self):
        r"""__init__(projwp_params self) -> projwp_params"""
        _cosmology.projwp_params_swiginit(self, _cosmology.new_projwp_params())
    __swig_destroy__ = _cosmology.delete_projwp_params

# Register projwp_params in _cosmology:
_cosmology.projwp_params_swigregister(projwp_params)
class rz_params(object):
    r"""Proxy of C++ rz_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.rz_params_cptr_get, _cosmology.rz_params_cptr_set, doc=r"""cptr : p.cosmology""")
    z = property(_cosmology.rz_params_z_get, _cosmology.rz_params_z_set, doc=r"""z : p.double""")
    tgt = property(_cosmology.rz_params_tgt_get, _cosmology.rz_params_tgt_set, doc=r"""tgt : p.double""")

    def __init__(self):
        r"""__init__(rz_params self) -> rz_params"""
        _cosmology.rz_params_swiginit(self, _cosmology.new_rz_params())
    __swig_destroy__ = _cosmology.delete_rz_params

# Register rz_params in _cosmology:
_cosmology.rz_params_swigregister(rz_params)
class z_params(object):
    r"""Proxy of C++ z_params class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cptr = property(_cosmology.z_params_cptr_get, _cosmology.z_params_cptr_set, doc=r"""cptr : p.cosmology""")
    mag = property(_cosmology.z_params_mag_get, _cosmology.z_params_mag_set, doc=r"""mag : p.double""")

    def __init__(self):
        r"""__init__(z_params self) -> z_params"""
        _cosmology.z_params_swiginit(self, _cosmology.new_z_params())
    __swig_destroy__ = _cosmology.delete_z_params

# Register z_params in _cosmology:
_cosmology.z_params_swigregister(z_params)

