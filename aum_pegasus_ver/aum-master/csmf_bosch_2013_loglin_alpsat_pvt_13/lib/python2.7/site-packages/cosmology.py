# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cosmology', [dirname(__file__)])
        except ImportError:
            import _cosmology
            return _cosmology
        if fp is not None:
            try:
                _mod = imp.load_module('_cosmology', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _cosmology = swig_import_helper()
    del swig_import_helper
else:
    import _cosmology
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class dp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cosmology.new_dp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_dp
    __del__ = lambda self : None;
    def assign(self, *args): return _cosmology.dp_assign(self, *args)
    def value(self): return _cosmology.dp_value(self)
    def cast(self): return _cosmology.dp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _cosmology.dp_frompointer
    if _newclass:frompointer = staticmethod(_cosmology.dp_frompointer)
dp_swigregister = _cosmology.dp_swigregister
dp_swigregister(dp)

def dp_frompointer(*args):
  return _cosmology.dp_frompointer(*args)
dp_frompointer = _cosmology.dp_frompointer

class cosmo(_object):
    """Proxy of C++ cosmo class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cosmo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cosmo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Om0"] = _cosmology.cosmo_Om0_set
    __swig_getmethods__["Om0"] = _cosmology.cosmo_Om0_get
    if _newclass:Om0 = _swig_property(_cosmology.cosmo_Om0_get, _cosmology.cosmo_Om0_set)
    __swig_setmethods__["Omk"] = _cosmology.cosmo_Omk_set
    __swig_getmethods__["Omk"] = _cosmology.cosmo_Omk_get
    if _newclass:Omk = _swig_property(_cosmology.cosmo_Omk_get, _cosmology.cosmo_Omk_set)
    __swig_setmethods__["w0"] = _cosmology.cosmo_w0_set
    __swig_getmethods__["w0"] = _cosmology.cosmo_w0_get
    if _newclass:w0 = _swig_property(_cosmology.cosmo_w0_get, _cosmology.cosmo_w0_set)
    __swig_setmethods__["wa"] = _cosmology.cosmo_wa_set
    __swig_getmethods__["wa"] = _cosmology.cosmo_wa_get
    if _newclass:wa = _swig_property(_cosmology.cosmo_wa_get, _cosmology.cosmo_wa_set)
    __swig_setmethods__["Omb"] = _cosmology.cosmo_Omb_set
    __swig_getmethods__["Omb"] = _cosmology.cosmo_Omb_get
    if _newclass:Omb = _swig_property(_cosmology.cosmo_Omb_get, _cosmology.cosmo_Omb_set)
    __swig_setmethods__["hval"] = _cosmology.cosmo_hval_set
    __swig_getmethods__["hval"] = _cosmology.cosmo_hval_get
    if _newclass:hval = _swig_property(_cosmology.cosmo_hval_get, _cosmology.cosmo_hval_set)
    __swig_setmethods__["th"] = _cosmology.cosmo_th_set
    __swig_getmethods__["th"] = _cosmology.cosmo_th_get
    if _newclass:th = _swig_property(_cosmology.cosmo_th_get, _cosmology.cosmo_th_set)
    __swig_setmethods__["s8"] = _cosmology.cosmo_s8_set
    __swig_getmethods__["s8"] = _cosmology.cosmo_s8_get
    if _newclass:s8 = _swig_property(_cosmology.cosmo_s8_get, _cosmology.cosmo_s8_set)
    __swig_setmethods__["nspec"] = _cosmology.cosmo_nspec_set
    __swig_getmethods__["nspec"] = _cosmology.cosmo_nspec_get
    if _newclass:nspec = _swig_property(_cosmology.cosmo_nspec_get, _cosmology.cosmo_nspec_set)
    __swig_setmethods__["ximax"] = _cosmology.cosmo_ximax_set
    __swig_getmethods__["ximax"] = _cosmology.cosmo_ximax_get
    if _newclass:ximax = _swig_property(_cosmology.cosmo_ximax_get, _cosmology.cosmo_ximax_set)
    __swig_setmethods__["cfac"] = _cosmology.cosmo_cfac_set
    __swig_getmethods__["cfac"] = _cosmology.cosmo_cfac_get
    if _newclass:cfac = _swig_property(_cosmology.cosmo_cfac_get, _cosmology.cosmo_cfac_set)
    def __init__(self): 
        """__init__(cosmo self) -> cosmo"""
        this = _cosmology.new_cosmo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_cosmo
    __del__ = lambda self : None;
cosmo_swigregister = _cosmology.cosmo_swigregister
cosmo_swigregister(cosmo)

class gf_par(_object):
    """Proxy of C++ gf_par class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gf_par, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gf_par, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Omega0"] = _cosmology.gf_par_Omega0_set
    __swig_getmethods__["Omega0"] = _cosmology.gf_par_Omega0_get
    if _newclass:Omega0 = _swig_property(_cosmology.gf_par_Omega0_get, _cosmology.gf_par_Omega0_set)
    __swig_setmethods__["OmegaL"] = _cosmology.gf_par_OmegaL_set
    __swig_getmethods__["OmegaL"] = _cosmology.gf_par_OmegaL_get
    if _newclass:OmegaL = _swig_property(_cosmology.gf_par_OmegaL_get, _cosmology.gf_par_OmegaL_set)
    __swig_setmethods__["w0"] = _cosmology.gf_par_w0_set
    __swig_getmethods__["w0"] = _cosmology.gf_par_w0_get
    if _newclass:w0 = _swig_property(_cosmology.gf_par_w0_get, _cosmology.gf_par_w0_set)
    __swig_setmethods__["wa"] = _cosmology.gf_par_wa_set
    __swig_getmethods__["wa"] = _cosmology.gf_par_wa_get
    if _newclass:wa = _swig_property(_cosmology.gf_par_wa_get, _cosmology.gf_par_wa_set)
    def __init__(self): 
        """__init__(gf_par self) -> gf_par"""
        this = _cosmology.new_gf_par()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_gf_par
    __del__ = lambda self : None;
gf_par_swigregister = _cosmology.gf_par_swigregister
gf_par_swigregister(gf_par)

class march_params(_object):
    """Proxy of C++ march_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, march_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, march_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fac"] = _cosmology.march_params_fac_set
    __swig_getmethods__["fac"] = _cosmology.march_params_fac_get
    if _newclass:fac = _swig_property(_cosmology.march_params_fac_get, _cosmology.march_params_fac_set)
    def __init__(self): 
        """__init__(march_params self) -> march_params"""
        this = _cosmology.new_march_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_march_params
    __del__ = lambda self : None;
march_params_swigregister = _cosmology.march_params_swigregister
march_params_swigregister(march_params)

class qk_params(_object):
    """Proxy of C++ qk_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qk_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qk_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.qk_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.qk_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.qk_params_cptr_get, _cosmology.qk_params_cptr_set)
    __swig_setmethods__["k"] = _cosmology.qk_params_k_set
    __swig_getmethods__["k"] = _cosmology.qk_params_k_get
    if _newclass:k = _swig_property(_cosmology.qk_params_k_get, _cosmology.qk_params_k_set)
    __swig_setmethods__["z"] = _cosmology.qk_params_z_set
    __swig_getmethods__["z"] = _cosmology.qk_params_z_get
    if _newclass:z = _swig_property(_cosmology.qk_params_z_get, _cosmology.qk_params_z_set)
    __swig_setmethods__["xmax"] = _cosmology.qk_params_xmax_set
    __swig_getmethods__["xmax"] = _cosmology.qk_params_xmax_get
    if _newclass:xmax = _swig_property(_cosmology.qk_params_xmax_get, _cosmology.qk_params_xmax_set)
    __swig_setmethods__["opt"] = _cosmology.qk_params_opt_set
    __swig_getmethods__["opt"] = _cosmology.qk_params_opt_get
    if _newclass:opt = _swig_property(_cosmology.qk_params_opt_get, _cosmology.qk_params_opt_set)
    def __init__(self): 
        """__init__(qk_params self) -> qk_params"""
        this = _cosmology.new_qk_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_qk_params
    __del__ = lambda self : None;
qk_params_swigregister = _cosmology.qk_params_swigregister
qk_params_swigregister(qk_params)

class projwpk_params(_object):
    """Proxy of C++ projwpk_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, projwpk_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, projwpk_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.projwpk_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.projwpk_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.projwpk_params_cptr_get, _cosmology.projwpk_params_cptr_set)
    __swig_setmethods__["R"] = _cosmology.projwpk_params_R_set
    __swig_getmethods__["R"] = _cosmology.projwpk_params_R_get
    if _newclass:R = _swig_property(_cosmology.projwpk_params_R_get, _cosmology.projwpk_params_R_set)
    __swig_setmethods__["z"] = _cosmology.projwpk_params_z_set
    __swig_getmethods__["z"] = _cosmology.projwpk_params_z_get
    if _newclass:z = _swig_property(_cosmology.projwpk_params_z_get, _cosmology.projwpk_params_z_set)
    __swig_setmethods__["fkai"] = _cosmology.projwpk_params_fkai_set
    __swig_getmethods__["fkai"] = _cosmology.projwpk_params_fkai_get
    if _newclass:fkai = _swig_property(_cosmology.projwpk_params_fkai_get, _cosmology.projwpk_params_fkai_set)
    def __init__(self): 
        """__init__(projwpk_params self) -> projwpk_params"""
        this = _cosmology.new_projwpk_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_projwpk_params
    __del__ = lambda self : None;
projwpk_params_swigregister = _cosmology.projwpk_params_swigregister
projwpk_params_swigregister(projwpk_params)

class cDel_params(_object):
    """Proxy of C++ cDel_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cDel_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cDel_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.cDel_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.cDel_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.cDel_params_cptr_get, _cosmology.cDel_params_cptr_set)
    __swig_setmethods__["cvir"] = _cosmology.cDel_params_cvir_set
    __swig_getmethods__["cvir"] = _cosmology.cDel_params_cvir_get
    if _newclass:cvir = _swig_property(_cosmology.cDel_params_cvir_get, _cosmology.cDel_params_cvir_set)
    __swig_setmethods__["omegaz"] = _cosmology.cDel_params_omegaz_set
    __swig_getmethods__["omegaz"] = _cosmology.cDel_params_omegaz_get
    if _newclass:omegaz = _swig_property(_cosmology.cDel_params_omegaz_get, _cosmology.cDel_params_omegaz_set)
    __swig_setmethods__["dcz"] = _cosmology.cDel_params_dcz_set
    __swig_getmethods__["dcz"] = _cosmology.cDel_params_dcz_get
    if _newclass:dcz = _swig_property(_cosmology.cDel_params_dcz_get, _cosmology.cDel_params_dcz_set)
    __swig_setmethods__["Delta"] = _cosmology.cDel_params_Delta_set
    __swig_getmethods__["Delta"] = _cosmology.cDel_params_Delta_get
    if _newclass:Delta = _swig_property(_cosmology.cDel_params_Delta_get, _cosmology.cDel_params_Delta_set)
    def __init__(self): 
        """__init__(cDel_params self) -> cDel_params"""
        this = _cosmology.new_cDel_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_cDel_params
    __del__ = lambda self : None;
cDel_params_swigregister = _cosmology.cDel_params_swigregister
cDel_params_swigregister(cDel_params)


def dTime(*args):
  """dTime(double arg1, void * arg2) -> double"""
  return _cosmology.dTime(*args)

def dChi(*args):
  """dChi(double arg1, void * arg2) -> double"""
  return _cosmology.dChi(*args)

def dneffint(*args):
  """dneffint(double arg1, void * arg2) -> double"""
  return _cosmology.dneffint(*args)

def dCint(*args):
  """dCint(double arg1, void * arg2) -> double"""
  return _cosmology.dCint(*args)

def findmvir(*args):
  """findmvir(double arg1, void * arg2) -> double"""
  return _cosmology.findmvir(*args)

def findksig(*args):
  """findksig(double arg1, void * arg2) -> double"""
  return _cosmology.findksig(*args)

def dxi_L(*args):
  """dxi_L(double arg1, void * arg2) -> double"""
  return _cosmology.dxi_L(*args)

def dPktest_L(*args):
  """dPktest_L(double arg1, void * arg2) -> double"""
  return _cosmology.dPktest_L(*args)

def dPktest_NL(*args):
  """dPktest_NL(double arg1, void * arg2) -> double"""
  return _cosmology.dPktest_NL(*args)

def dPktest_zetaNL(*args):
  """dPktest_zetaNL(double arg1, void * arg2) -> double"""
  return _cosmology.dPktest_zetaNL(*args)

def dxi_NL(*args):
  """dxi_NL(double arg1, void * arg2) -> double"""
  return _cosmology.dxi_NL(*args)

def E_sq(*args):
  """E_sq(gf_par arg1, double & arg2) -> double"""
  return _cosmology.E_sq(*args)

def dE_sqdz(*args):
  """dE_sqdz(gf_par arg1, double & arg2) -> double"""
  return _cosmology.dE_sqdz(*args)

def getall(*args):
  """getall(gf_par arg1, double & arg2, double & arg3, double & arg4, double & arg5)"""
  return _cosmology.getall(*args)

def d2lnE_sqdz2(*args):
  """d2lnE_sqdz2(gf_par arg1, double & arg2) -> double"""
  return _cosmology.d2lnE_sqdz2(*args)

def gf_func(*args):
  """gf_func(double arg1, double const [] arg2, double [] arg3, void * arg4) -> int"""
  return _cosmology.gf_func(*args)

def gf_jac(*args):
  """gf_jac(double arg1, double const [] arg2, double * arg3, double [] arg4, void * arg5) -> int"""
  return _cosmology.gf_jac(*args)

def findrz(*args):
  """findrz(double x, void * params) -> double"""
  return _cosmology.findrz(*args)

def findzmax(*args):
  """findzmax(double x, void * params) -> double"""
  return _cosmology.findzmax(*args)

def dwpnl(*args):
  """dwpnl(double x, void * params) -> double"""
  return _cosmology.dwpnl(*args)

def dwpl(*args):
  """dwpl(double x, void * params) -> double"""
  return _cosmology.dwpl(*args)

def dQk(*args):
  """dQk(double arg1, void * arg2) -> double"""
  return _cosmology.dQk(*args)

def dxinlbar(*args):
  """dxinlbar(double arg1, void * arg2) -> double"""
  return _cosmology.dxinlbar(*args)

def dxinlbarbar(*args):
  """dxinlbarbar(double arg1, void * arg2) -> double"""
  return _cosmology.dxinlbarbar(*args)

def dxilbar(*args):
  """dxilbar(double arg1, void * arg2) -> double"""
  return _cosmology.dxilbar(*args)

def dxilbarbar(*args):
  """dxilbarbar(double arg1, void * arg2) -> double"""
  return _cosmology.dxilbarbar(*args)

def dwpnl_kaiser(*args):
  """dwpnl_kaiser(double arg1, void * arg2) -> double"""
  return _cosmology.dwpnl_kaiser(*args)

def dwpl_kaiser(*args):
  """dwpl_kaiser(double arg1, void * arg2) -> double"""
  return _cosmology.dwpl_kaiser(*args)

def dvar_G(*args):
  """dvar_G(double x, void * params) -> double"""
  return _cosmology.dvar_G(*args)

def dvar_TH(*args):
  """dvar_TH(double x, void * params) -> double"""
  return _cosmology.dvar_TH(*args)

def findcmarch(*args):
  """findcmarch(double arg1, void * arg2) -> double"""
  return _cosmology.findcmarch(*args)

def findcDel(*args):
  """findcDel(double arg1, void * arg2) -> double"""
  return _cosmology.findcDel(*args)

def findcDelp(*args):
  """findcDelp(double arg1, void * arg2) -> double"""
  return _cosmology.findcDelp(*args)
class cosmology(_object):
    """Proxy of C++ cosmology class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cosmology, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cosmology, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cosmology.delete_cosmology
    __del__ = lambda self : None;
    def __init__(self, *args): 
        """
        __init__(cosmology self) -> cosmology
        __init__(cosmology self, double om0, double omk, double w0, double wa, double omb, double h, double theta, 
            double sigma8, double ns, double ximax, double cfac) -> cosmology
        __init__(cosmology self, cosmo arg2) -> cosmology

        Initializes cosmology object 

        :Parameters:

        -   Omega0 : Matter density parameter
        -   OmegaK : Curvature parameter
        -   w0 : Dark energy equation of state parameter
        -   wa : Dark energy equation of state parameter
        -   Omegab : Baryon density parameter
        -   h : Hubble parameter
        -   ThetaCMB : CMB temperature
        -   sigma8 : sigma8
        -   ns : power spectrum index
        -   psi : Parameter psi defined in van den Bosch 2013, only relevant for halo model calculation
        -   cfac : Constant multiplicative factor for the c-M relation

        :Returns:

        -   Cosmology object

            Without any inputs, initializes to flat WMAP3 LCDM cosmology, cfac=1.0, ximax=log10(8.0).

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> help(a)


        """
        this = _cosmology.new_cosmology(*args)
        try: self.this.append(this)
        except: self.this = this
    def cosmo_free(self):
        """
        cosmo_free(cosmology self)

        Frees all memory associated with cosmology object

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.cosmo_free()


        """
        return _cosmology.cosmology_cosmo_free(self)

    def Dcofz(self, *args):
        """
        Dcofz(cosmology self, double z) -> double

        Comoving distance as a function of redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Comoving distance

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Dcofz(0.5)


        """
        return _cosmology.cosmology_Dcofz(self, *args)

    def Dlofz(self, *args):
        """
        Dlofz(cosmology self, double z) -> double

        Luminosity distance as a function of redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Luminosity distance

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Dlofz(0.5)


        """
        return _cosmology.cosmology_Dlofz(self, *args)

    def Daofz(self, *args):
        """
        Daofz(cosmology self, double z) -> double

        Angular diameter distance as a function of redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Angular diameter distance

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Daofz(0.5)


        """
        return _cosmology.cosmology_Daofz(self, *args)

    def Daofzlh(self, *args):
        """
        Daofzlh(cosmology self, double zl, double zh) -> double

        Angular diameter distance as a function of redshift of lens and source

        :Parameters:

        -   zl : Redshift of lens
        -   zh : Redshift of source

        :Returns:

        -   Angular diameter distance between two redshifts

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Daofzlh(0.5,1.0)


        """
        return _cosmology.cosmology_Daofzlh(self, *args)

    def growthfactor_num(self, *args):
        """
        growthfactor_num(cosmology self, double z) -> double

        Growth factor as a function of redshift (normalized to unity at redshift zero)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Growth factor at redshift z

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.growthfactor_num(0.5)


        """
        return _cosmology.cosmology_growthfactor_num(self, *args)

    def dlnDdln1pz(self, *args):
        """
        dlnDdln1pz(cosmology self, double z) -> double

        Negative of the logarithmic derivative of growth factor with scale factor

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Negative of the logarithmic derivative of growth factor with scale factor

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.dlnDdln1pz(0.5)


        """
        return _cosmology.cosmology_dlnDdln1pz(self, *args)

    def Omega(self, *args):
        """
        Omega(cosmology self, double z) -> double

        Matter density parameter at redshift z

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Matter density parameter at redshift z

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Omega(0.5)


        """
        return _cosmology.cosmology_Omega(self, *args)

    def Omegaw(self, *args):
        """
        Omegaw(cosmology self, double z) -> double

        Dark energy density parameter at redshift z

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Dark energy density parameter at redshift z

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Omegaw(0.5)


        """
        return _cosmology.cosmology_Omegaw(self, *args)

    def Delta_crit(self, *args):
        """
        Delta_crit(cosmology self, double z) -> double

        Virial density contrast at redshift z a'la Bryan and Norman '98

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Virial density contrast (with respect to critical density at redshift z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Delta_crit(0.5)


        """
        return _cosmology.cosmology_Delta_crit(self, *args)

    def set_optmf(self, *args):
        """
        set_optmf(cosmology self, int opt)

        Set mass function option

        :Parameters:

        -   option = 1: Tinker et al. 2010 mass function (well tested and consistent
            with the bias prescription
        -   option = 2: Sheth Tormen mass function
        -   option = 3: Bhattacharya et al. 2010 mass function

        :Returns:

        -   Set mass function choice (default is equal to 1 if this function is not called)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.set_optmf(1)


        """
        return _cosmology.cosmology_set_optmf(self, *args)

    def Delta2_L_num(self, *args):
        """
        Delta2_L_num(cosmology self, double k, double z) -> double

        Power per logarithmic k interval in the linear matter power spectrum Delta^2(k,z)

        :Parameters:

        -   k: Wavenumber (in h Mpc^{-1})
        -   z: Redshift

        :Returns:

        -   Delta^2(k,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Delta2_L_num(0.1,0.0)


        """
        return _cosmology.cosmology_Delta2_L_num(self, *args)

    def Delta2_NL_num(self, *args):
        """
        Delta2_NL_num(cosmology self, double k, double z) -> double

        Power per logarithmic k interval in the nonlinear matter power spectrum Delta^2_NL(k,z)

        :Parameters:

        -   k: Wavenumber (in h Mpc^{-1})
        -   z: Redshift

        :Returns:

        -   Nonlinear Delta^2(k,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Delta2_NL_num(0.1,0.0)


        """
        return _cosmology.cosmology_Delta2_NL_num(self, *args)

    def xi_L_num(self, *args):
        """
        xi_L_num(cosmology self, double k, double z) -> double

        Linear matter correlation function

        :Parameters:

        -   r: Scale (in hinv Mpc)
        -   z: Redshift

        :Returns:

        -   Linear matter correlation function (r,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_L_num(0.1,0.0)


        """
        return _cosmology.cosmology_xi_L_num(self, *args)

    def xi_NL_num(self, *args):
        """
        xi_NL_num(cosmology self, double k, double z) -> double

        Non-Linear matter correlation function

        :Parameters:

        -   r: Scale (in hinv Mpc)
        -   z: Redshift

        :Returns:

        -   Non-linear matter correlation function (r,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_NL_num(0.1,0.0)


        """
        return _cosmology.cosmology_xi_NL_num(self, *args)

    def nofm(self, *args):
        """
        nofm(cosmology self, double M, double z) -> double

        Mass function as a function of mass and redshift

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        -   dN(>M)/dM of halos, where N(>M) is the cumulative number density of halos with mass larger than M, commonly referred to as mass function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.nofm(1e12,0.0)


        """
        return _cosmology.cosmology_nofm(self, *args)

    def bias(self, *args):
        """
        bias(cosmology self, double M, double z) -> double

        Halo bias function as a function of mass and redshift

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        -   Large scale halo bias

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.bias(1e12,0.0)


        """
        return _cosmology.cosmology_bias(self, *args)

    def varM_TH_num(self, *args):
        """
        varM_TH_num(cosmology self, double M, double z) -> double

        Variance of fluctuations on a given mass scale [sigma^2(M,z)]

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        -   Variance of fluctuations when density field is smoothed on the lagrangian radius corresponding to a given mass scale 

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.varM_TH_num(1e12,0.0)


        """
        return _cosmology.cosmology_varM_TH_num(self, *args)

    def varM_TH_num_deriv(self, *args):
        """
        varM_TH_num_deriv(cosmology self, double M, double z) -> double

        dln sigma^2/dln M

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        - dln sigma^2/dln M  (M,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.varM_TH_num_deriv(1e12,0.0)


        """
        return _cosmology.cosmology_varM_TH_num_deriv(self, *args)

    def Nplus(self, *args):
        """
        Nplus(cosmology self, double M200, double z) -> double

        Number density of halos with mass above a given mass at a given redshift

        :Parameters:

        -   M: Mass (in hinv Msun)
        -   z: Redshift

        :Returns:

        - N(>M,z)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Nplus(1e12,0.0)


        """
        return _cosmology.cosmology_Nplus(self, *args)

    def getM(self, *args):
        """
        getM(cosmology self, double Nplus, double z) -> double

        Find mass such that halos with mass larger than it have a given number density at a given redshift

        :Parameters:

        -   Nplus: Target number density (in h^3 Mpc^{-3})
        -   z: Redshift

        :Returns:

        -   M: Mass (hinv Msun)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getM(1e-6,0.0)


        """
        return _cosmology.cosmology_getM(self, *args)

    def modelNFWhalo(self, *args):
        """
        modelNFWhalo(cosmology self, double M200, double z)

        Output the virial mass, physical virial radius, virial
        concentration of a halo, its physical radius with density
        contrast 200m and the corresponding concentration c200m
        given a mass M200m at redshift z

        :Parameters:

        -   M200m: Mass (hinv Msun) defined 200 times overdense with respect to the background
        -   z: Redshift

        :Returns:

        -   Mvir : The virial mass (hinv Msun)
        -   Rvir : The physical virial radius (hinv Mpc)
        -   cvir : The virial concentration
        -   R200m : The physical boundary of halo 200 times overdense with respect to background density (hinv Mpc)
        -   c200m : The concentration of halo 200 times overdense with respect to background density

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.modelNFWhalo(1e12,0.0)


        """
        return _cosmology.cosmology_modelNFWhalo(self, *args)

    def modelNFWhalo_com(self, *args):
        """
        modelNFWhalo_com(cosmology self, double M200, double z)

        Output the virial mass, comoving virial radius, virial
        concentration of a halo, its comoving radius with density
        contrast 200m and the corresponding concentration c200m
        given a mass M200m at redshift z

        :Parameters:

        -   M200m: Mass (hinv Msun) defined 200 times overdense with respect to the background
        -   z: Redshift

        :Returns:

        -   Mvir : The virial mass (hinv Msun)
        -   Rvir : The comoving virial radius (hinv Mpc)
        -   cvir : The virial concentration
        -   R200m : The comoving boundary of halo 200 times overdense with respect to background density (hinv Mpc)
        -   c200m : The concentration of halo 200 times overdense with respect to background density

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.modelNFWhalo_com(1e12,0.0)


        """
        return _cosmology.cosmology_modelNFWhalo_com(self, *args)

    def conc(self, *args):
        """
        conc(cosmology self, double Mvir, double z) -> double

        Concentration of halos

        :Parameters:

        -   Mvir: Virial mass (hinv Msun) 
        -   z: Redshift

        :Returns:

        -   cvir : The virial concentration

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.conc(1e12,0.0)


        """
        return _cosmology.cosmology_conc(self, *args)

    def Eofz(self, *args):
        """
        Eofz(cosmology self, double z) -> double

        Returns the cosmological expansion function E(z)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Eofz: Expansion function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Eofz(0.5)
            1.28111279753

        """
        return _cosmology.cosmology_Eofz(self, *args)

    def setnew_z(self, *args):
        """
        setnew_z(cosmology self, double z)

        Reset the global redshift at which many of the splines in the cosmology code are initialized. This is rarely used function.

        :Parameters:

        -   z : Redshift

        :Returns:

        -   None: None

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.setnew_z(0.5)
            1

        """
        return _cosmology.cosmology_setnew_z(self, *args)

    def gets8(self):
        """
        gets8(cosmology self) -> double

        Output value of sigma8

        :Parameters:

        -   None : No inputs

        :Returns:

        -   sigma8 : sigma8

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.gets8()

        """
        return _cosmology.cosmology_gets8(self)

    def getOmb(self):
        """
        getOmb(cosmology self) -> double

        Output value of Omegab

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   Omegab : Baryon density parameter

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getOmb()

        """
        return _cosmology.cosmology_getOmb(self)

    def geth(self):
        """
        geth(cosmology self) -> double

        Output value of h value

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   h : Hubble parameter

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.geth()

        """
        return _cosmology.cosmology_geth(self)

    def getns(self):
        """
        getns(cosmology self) -> double

        Output value of spectral index

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   ns : Spectral index of initial density fluctuations

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getns()

        """
        return _cosmology.cosmology_getns(self)

    def getxinlzetamax(self):
        """
        getxinlzetamax(cosmology self) -> double

        Returns the value of psi from van den Bosch 2013

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   psi : Psi defined in van den Bosch 2013

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getxinlzetamax()

        """
        return _cosmology.cosmology_getxinlzetamax(self)

    def get_cfac(self):
        """
        get_cfac(cosmology self) -> double

        Returns factor multiplying all concentrations calculated by the code

        :Parameters:

        -   None : No input parameters

        :Returns:

        -   cfac : Factor multiplying all concentrations output by the code

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_cfac()

        """
        return _cosmology.cosmology_get_cfac(self)

    def set_cfac(self, *args):
        """
        set_cfac(cosmology self, double cfac) -> double

        Sets factor multiplying all concentrations calculated by the code

        :Parameters:

        -   cfac : Factor multiplying all concentrations output by the code

        :Returns:

        -   None : None

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.set_cfac(1.0)

        """
        return _cosmology.cosmology_set_cfac(self, *args)

    def getzmax(self, *args):
        """
        getzmax(cosmology self, double xL) -> double

        Get the maximum redshift to which a galaxy can be observed by SDSS spectroscopic survey

        :Parameters:

        -   xL: Luminosity in h^{-2} Lsun

        :Returns:

        -   z : Redshift

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getzmax(1e12)

        """
        return _cosmology.cosmology_getzmax(self, *args)

    def getLmin(self, *args):
        """
        getLmin(cosmology self, double z, double L1) -> double

        Get the minimum luminosity of galaxies that can be observed by SDSS spectroscopic survey at a given redshift

        :Parameters:

        -   z : Redshift

        :Returns:

        -   xL: Luminosity in h^{-2} Lsun

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.getLmin(0.1)

        """
        return _cosmology.cosmology_getLmin(self, *args)

    def Time(self, *args):
        """
        Time(cosmology self, double z) -> double

        Get the time in units of 1/(H_0 km/s/Mpc/yr)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Time : in units of 1/(H_0 km/s/Mpc/yr)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Time(0.1)

        """
        return _cosmology.cosmology_Time(self, *args)

    def Lookback(self, *args):
        """
        Lookback(cosmology self, double z) -> double

        Get the lookback time in units of 1/(H_0 km/s/Mpc/yr)

        :Parameters:

        -   z : Redshift

        :Returns:

        -   Lookback Time : in units of 1/(H_0 km/s/Mpc/yr)

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.Lookback(0.1)

        """
        return _cosmology.cosmology_Lookback(self, *args)

    def wpnl(self, *args):
        """
        wpnl(cosmology self, double z, double rad, double projmax) -> double

        Get the projected non-linear matter correlation function

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit

        :Returns:

        -   wpnl : Projected non-linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpnl(0.1,0.1,100.0)

        """
        return _cosmology.cosmology_wpnl(self, *args)

    def wpl(self, *args):
        """
        wpl(cosmology self, double z, double rad, double projmax) -> double

        Get the projected linear matter correlation function

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit

        :Returns:

        -   wpl : Projected linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpl(0.1,0.1,100.0)

        """
        return _cosmology.cosmology_wpl(self, *args)

    def wpnl_kaiser(self, *args):
        """
        wpnl_kaiser(cosmology self, double z, double rad, double projmax, double fkai) -> double

        Get the projected non-linear matter correlation function accounting for Kaiser effects

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit
        -   fkai : Kaiser factor f/b

        :Returns:

        -   wpnl_kaiser : Projected non-linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpnl_kaiser(0.1,0.1,100.0,1.0)

        """
        return _cosmology.cosmology_wpnl_kaiser(self, *args)

    def xi_NL_kaiser(self, *args):
        """
        xi_NL_kaiser(cosmology self, double r, double z, double mu, double fkai) -> double

        Get the non-linear matter correlation function accounting for Kaiser effects

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   mu : Cosine of angle between separation vector and line of sight
        -   fkai : Kaiser factor f/b

        :Returns:

        -   xi_nl_kaiser : Non-linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_nl_kaiser(0.1,0.1,0.5,1.0)

        """
        return _cosmology.cosmology_xi_NL_kaiser(self, *args)

    def wpl_kaiser(self, *args):
        """
        wpl_kaiser(cosmology self, double z, double rad, double projmax, double fkai) -> double

        Get the projected linear matter correlation function accounting for Kaiser effect

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   pimax : Line-of-sight integration limit
        -   fkai : Kaiser factor f/b

        :Returns:

        -   wpl : Projected linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.wpl_kaiser(0.1,0.1,100.0,1.0)

        """
        return _cosmology.cosmology_wpl_kaiser(self, *args)

    def xi_L_kaiser(self, *args):
        """
        xi_L_kaiser(cosmology self, double r, double z, double mu, double fkai) -> double

        Get the linear matter correlation function accounting for Kaiser effect

        :Parameters:

        -   r : Separation of galaxies
        -   z : Redshift
        -   mu : Cosine of angle between separation vector and line of sight
        -   fkai : Kaiser factor f/b

        :Returns:

        -   xi_l : Linear matter correlation function

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.xi_L_kaiser(0.1,0.1,0.5,1.0)

        """
        return _cosmology.cosmology_xi_L_kaiser(self, *args)

    def renew(self, *args):
        """renew(cosmology self, cosmo p)"""
        return _cosmology.cosmology_renew(self, *args)

    def rsound(self):
        """
        rsound(cosmology self) -> double

        Get the comoving sound horizon at the drag epoch

        :Parameters:

        -   None : None

        :Returns:

        -   rsound : Comoving sound horizon at drag epoch a'la Eisenstein and Hu 98

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.rsound()

        """
        return _cosmology.cosmology_rsound(self)

    def get_deltapi(self, *args):
        """
        get_deltapi(cosmology self, double z1, double z2) -> double

        Calculate the line of sight separation between two galaxies

        :Parameters:

        -   z1 : Redshift
        -   z2 : Redshift

        :Returns:

        -   Line of sight separation between two galaxies

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_deltapi(0.0, 0.2)


        """
        return _cosmology.cosmology_get_deltapi(self, *args)

    def get_sinsqang(self, *args):
        """
        get_sinsqang(cosmology self, double x1, double y1, double z1, double x2, double y2, double z2) -> double

        Calculate the square of the sin of the angle between two galaxies

        :Parameters:

        -   x1 : Cartesian x for the unit vector pointing at Galaxy 1
        -   y1 : Cartesian y for the unit vector pointing at Galaxy 1
        -   z1 : Cartesian z for the unit vector pointing at Galaxy 1
        -   x2 : Cartesian x for the unit vector pointing at Galaxy 2
        -   y2 : Cartesian y for the unit vector pointing at Galaxy 2
        -   z2 : Cartesian z for the unit vector pointing at Galaxy 2

        :Returns:

        -   Square of the sin of the angle between two galaxies

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_sinsqang(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)


        """
        return _cosmology.cosmology_get_sinsqang(self, *args)

    def get_logrp(self, *args):
        """
        get_logrp(cosmology self, double x1, double y1, double z1, double x2, double y2, double z2, double Chisq) -> double

        Calculate the projected separation between two galaxies

        :Parameters:

        -   x1 : Cartesian x for the unit vector pointing at Galaxy 1
        -   y1 : Cartesian y for the unit vector pointing at Galaxy 1
        -   z1 : Cartesian z for the unit vector pointing at Galaxy 1
        -   x2 : Cartesian x for the unit vector pointing at Galaxy 2
        -   y2 : Cartesian y for the unit vector pointing at Galaxy 2
        -   z2 : Cartesian z for the unit vector pointing at Galaxy 2

        :Returns:

        -   Log of projected separation between two galaxies

        :Examples:

        >>> import cosmology as cc
        >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
        >>> a.get_logrp(0.0, 1.0, 0.0, 1.0, 0.0, 0.0)


        """
        return _cosmology.cosmology_get_logrp(self, *args)

    def getmstar(self):
        """getmstar(cosmology self) -> double"""
        return _cosmology.cosmology_getmstar(self)

    def pevolve_fixed(self, *args):
        """
        pevolve_fixed(cosmology self, double cdel, int opt, double z, double zstart)

        Pseudo-evolution estimate for the mass (backward or forward):
        Assume that the physical density profile of a peak with
        concentration cdel at redshift zstart defined to be of type
        opt 
        remains fixed. Calculate its concentration at redshift z, and
        the ratio of its mass to the mass at redshift zstart.

        :Parameters:

        -   cdel : concentration of halo 
        -   opt : opt=1: Defined with respect to background density, opt=2: Defined to be virial mass, opt=3: Defined with respect to critical density
        -   z: Redshift
        -   zstart : The reference redshift at which the halo density profile is fixed

        :Returns:

        -   cdelz : The concentration of the halo at redshift z
        -   fdelz : The ratio of the mass at redshift z to the mass at redshift zstart

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.pevolve_fixed(12.0,1,1.0,0.0)
            [5.019071157921484, 0.585350923353302]

        """
        return _cosmology.cosmology_pevolve_fixed(self, *args)

    def getcDel(self, *args):
        """
        getcDel(cosmology self, double cvir, double z, double Delta) -> double

        Output the concentration, cDelta, of a halo defined as Delta
        with respect to the background density at redshift z and which
        has virial concentration equal to cvir.

        :Parameters:

        -   cvir : The virial concentration
        -   z : Redshift
        -   Del : The overdensity with respect to the background

        :Returns:

        -   cDelta : The concentration of this halo when defined as Del times overdense with respect to the background

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getcDel(10.0,0.0,200.)
            12.6784160959

        """
        return _cosmology.cosmology_getcDel(self, *args)

    def getRvirfromMvir(self, *args):
        """
        getRvirfromMvir(cosmology self, double Mvir, double z) -> double

        Compute the comoving virial radius from the virial mass

        :Parameters:

        -   Mvir : Virial mass
        -   z: Redshift

        :Returns:

        -   Rvir : The comoving virial radius

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getRvirfromMvir(1.E12, 0.0)

        """
        return _cosmology.cosmology_getRvirfromMvir(self, *args)

    def getRDelfromMDel(self, *args):
        """
        getRDelfromMDel(cosmology self, double Mdel, double z, double Del) -> double

        Compute the comoving halo radius from the halo mass with overdensity Delta

        :Parameters:

        -   MDel : Halo mass
        -   z: Redshift
        -   Del: Overdensity

        :Returns:

        -   RDel : The comoving halo boundary

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getRDelfromMDel(1.E12, 0.0, 200.0)

        """
        return _cosmology.cosmology_getRDelfromMDel(self, *args)

    def getcDeltap_from_cDelta(self, *args):
        """
        getcDeltap_from_cDelta(cosmology self, double cDelta, double Delta, double Deltap) -> double

        Output the concentration, cDeltap, of a NFW halo defined as Deltap with respect
        to the background density and which has concentration with respect to another
        definition, Delta, equal to cDelta.

        :Parameters:

        -   cDelta : The virial concentration
        -   Delta : The overdensity with respect to the background
        -   Deltap : The new overdensity with respect to the background at which to
            output concentration

        :Returns:

        -   cDeltap : The concentration of this halo when defined as Deltap times overdense with respect to the background

        :Examples:

            >>> import cosmology as cc
            >>> a = cc.cosmology(0.27,0.0,-1.0,0.0,0.0476,0.7,2.726,0.8,0.96,log10(8.0),1.0)
            >>> a.getcDeltap_from_cDelta(30.0, 200.0, 360.0)

        """
        return _cosmology.cosmology_getcDeltap_from_cDelta(self, *args)

    def bias_TI10_wDelta(self, *args):
        """bias_TI10_wDelta(cosmology self, double M, double z, double Delta) -> double"""
        return _cosmology.cosmology_bias_TI10_wDelta(self, *args)

    def MF_TI09_500c(self, *args):
        """MF_TI09_500c(cosmology self, double M, double z) -> double"""
        return _cosmology.cosmology_MF_TI09_500c(self, *args)

cosmology_swigregister = _cosmology.cosmology_swigregister
cosmology_swigregister(cosmology)

class np_params(_object):
    """Proxy of C++ np_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, np_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, np_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.np_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.np_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.np_params_cptr_get, _cosmology.np_params_cptr_set)
    __swig_setmethods__["z"] = _cosmology.np_params_z_set
    __swig_getmethods__["z"] = _cosmology.np_params_z_get
    if _newclass:z = _swig_property(_cosmology.np_params_z_get, _cosmology.np_params_z_set)
    __swig_setmethods__["Np"] = _cosmology.np_params_Np_set
    __swig_getmethods__["Np"] = _cosmology.np_params_Np_get
    if _newclass:Np = _swig_property(_cosmology.np_params_Np_get, _cosmology.np_params_Np_set)
    def __init__(self): 
        """__init__(np_params self) -> np_params"""
        this = _cosmology.new_np_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_np_params
    __del__ = lambda self : None;
np_params_swigregister = _cosmology.np_params_swigregister
np_params_swigregister(np_params)

class c_params(_object):
    """Proxy of C++ c_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.c_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.c_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.c_params_cptr_get, _cosmology.c_params_cptr_set)
    def __init__(self): 
        """__init__(c_params self) -> c_params"""
        this = _cosmology.new_c_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_c_params
    __del__ = lambda self : None;
c_params_swigregister = _cosmology.c_params_swigregister
c_params_swigregister(c_params)

class coll_params(_object):
    """Proxy of C++ coll_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coll_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coll_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.coll_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.coll_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.coll_params_cptr_get, _cosmology.coll_params_cptr_set)
    __swig_setmethods__["sig"] = _cosmology.coll_params_sig_set
    __swig_getmethods__["sig"] = _cosmology.coll_params_sig_get
    if _newclass:sig = _swig_property(_cosmology.coll_params_sig_get, _cosmology.coll_params_sig_set)
    def __init__(self): 
        """__init__(coll_params self) -> coll_params"""
        this = _cosmology.new_coll_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_coll_params
    __del__ = lambda self : None;
coll_params_swigregister = _cosmology.coll_params_swigregister
coll_params_swigregister(coll_params)

class mvir_params(_object):
    """Proxy of C++ mvir_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mvir_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mvir_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.mvir_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.mvir_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.mvir_params_cptr_get, _cosmology.mvir_params_cptr_set)
    __swig_setmethods__["m200"] = _cosmology.mvir_params_m200_set
    __swig_getmethods__["m200"] = _cosmology.mvir_params_m200_get
    if _newclass:m200 = _swig_property(_cosmology.mvir_params_m200_get, _cosmology.mvir_params_m200_set)
    __swig_setmethods__["z"] = _cosmology.mvir_params_z_set
    __swig_getmethods__["z"] = _cosmology.mvir_params_z_get
    if _newclass:z = _swig_property(_cosmology.mvir_params_z_get, _cosmology.mvir_params_z_set)
    def __init__(self): 
        """__init__(mvir_params self) -> mvir_params"""
        this = _cosmology.new_mvir_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_mvir_params
    __del__ = lambda self : None;
mvir_params_swigregister = _cosmology.mvir_params_swigregister
mvir_params_swigregister(mvir_params)

class c200_params(_object):
    """Proxy of C++ c200_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, c200_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, c200_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.c200_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.c200_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.c200_params_cptr_get, _cosmology.c200_params_cptr_set)
    __swig_setmethods__["cvir"] = _cosmology.c200_params_cvir_set
    __swig_getmethods__["cvir"] = _cosmology.c200_params_cvir_get
    if _newclass:cvir = _swig_property(_cosmology.c200_params_cvir_get, _cosmology.c200_params_cvir_set)
    __swig_setmethods__["omegaz"] = _cosmology.c200_params_omegaz_set
    __swig_getmethods__["omegaz"] = _cosmology.c200_params_omegaz_get
    if _newclass:omegaz = _swig_property(_cosmology.c200_params_omegaz_get, _cosmology.c200_params_omegaz_set)
    __swig_setmethods__["dcz"] = _cosmology.c200_params_dcz_set
    __swig_getmethods__["dcz"] = _cosmology.c200_params_dcz_get
    if _newclass:dcz = _swig_property(_cosmology.c200_params_dcz_get, _cosmology.c200_params_dcz_set)
    def __init__(self): 
        """__init__(c200_params self) -> c200_params"""
        this = _cosmology.new_c200_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_c200_params
    __del__ = lambda self : None;
c200_params_swigregister = _cosmology.c200_params_swigregister
c200_params_swigregister(c200_params)

class cDelta_params(_object):
    """Proxy of C++ cDelta_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cDelta_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cDelta_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cDelta"] = _cosmology.cDelta_params_cDelta_set
    __swig_getmethods__["cDelta"] = _cosmology.cDelta_params_cDelta_get
    if _newclass:cDelta = _swig_property(_cosmology.cDelta_params_cDelta_get, _cosmology.cDelta_params_cDelta_set)
    __swig_setmethods__["frac"] = _cosmology.cDelta_params_frac_set
    __swig_getmethods__["frac"] = _cosmology.cDelta_params_frac_get
    if _newclass:frac = _swig_property(_cosmology.cDelta_params_frac_get, _cosmology.cDelta_params_frac_set)
    def __init__(self): 
        """__init__(cDelta_params self) -> cDelta_params"""
        this = _cosmology.new_cDelta_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_cDelta_params
    __del__ = lambda self : None;
cDelta_params_swigregister = _cosmology.cDelta_params_swigregister
cDelta_params_swigregister(cDelta_params)

class cvar_params(_object):
    """Proxy of C++ cvar_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cvar_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cvar_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.cvar_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.cvar_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.cvar_params_cptr_get, _cosmology.cvar_params_cptr_set)
    __swig_setmethods__["R"] = _cosmology.cvar_params_R_set
    __swig_getmethods__["R"] = _cosmology.cvar_params_R_get
    if _newclass:R = _swig_property(_cosmology.cvar_params_R_get, _cosmology.cvar_params_R_set)
    __swig_setmethods__["z"] = _cosmology.cvar_params_z_set
    __swig_getmethods__["z"] = _cosmology.cvar_params_z_get
    if _newclass:z = _swig_property(_cosmology.cvar_params_z_get, _cosmology.cvar_params_z_set)
    __swig_setmethods__["psinit"] = _cosmology.cvar_params_psinit_set
    __swig_getmethods__["psinit"] = _cosmology.cvar_params_psinit_get
    if _newclass:psinit = _swig_property(_cosmology.cvar_params_psinit_get, _cosmology.cvar_params_psinit_set)
    def __init__(self): 
        """__init__(cvar_params self) -> cvar_params"""
        this = _cosmology.new_cvar_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_cvar_params
    __del__ = lambda self : None;
cvar_params_swigregister = _cosmology.cvar_params_swigregister
cvar_params_swigregister(cvar_params)

class pk_params(_object):
    """Proxy of C++ pk_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pk_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pk_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.pk_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.pk_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.pk_params_cptr_get, _cosmology.pk_params_cptr_set)
    __swig_setmethods__["k"] = _cosmology.pk_params_k_set
    __swig_getmethods__["k"] = _cosmology.pk_params_k_get
    if _newclass:k = _swig_property(_cosmology.pk_params_k_get, _cosmology.pk_params_k_set)
    __swig_setmethods__["z"] = _cosmology.pk_params_z_set
    __swig_getmethods__["z"] = _cosmology.pk_params_z_get
    if _newclass:z = _swig_property(_cosmology.pk_params_z_get, _cosmology.pk_params_z_set)
    def __init__(self): 
        """__init__(pk_params self) -> pk_params"""
        this = _cosmology.new_pk_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_pk_params
    __del__ = lambda self : None;
pk_params_swigregister = _cosmology.pk_params_swigregister
pk_params_swigregister(pk_params)

class xi_params(_object):
    """Proxy of C++ xi_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, xi_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, xi_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.xi_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.xi_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.xi_params_cptr_get, _cosmology.xi_params_cptr_set)
    __swig_setmethods__["r"] = _cosmology.xi_params_r_set
    __swig_getmethods__["r"] = _cosmology.xi_params_r_get
    if _newclass:r = _swig_property(_cosmology.xi_params_r_get, _cosmology.xi_params_r_set)
    __swig_setmethods__["z"] = _cosmology.xi_params_z_set
    __swig_getmethods__["z"] = _cosmology.xi_params_z_get
    if _newclass:z = _swig_property(_cosmology.xi_params_z_get, _cosmology.xi_params_z_set)
    def __init__(self): 
        """__init__(xi_params self) -> xi_params"""
        this = _cosmology.new_xi_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_xi_params
    __del__ = lambda self : None;
xi_params_swigregister = _cosmology.xi_params_swigregister
xi_params_swigregister(xi_params)

class ksig_params(_object):
    """Proxy of C++ ksig_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ksig_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ksig_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.ksig_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.ksig_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.ksig_params_cptr_get, _cosmology.ksig_params_cptr_set)
    __swig_setmethods__["z"] = _cosmology.ksig_params_z_set
    __swig_getmethods__["z"] = _cosmology.ksig_params_z_get
    if _newclass:z = _swig_property(_cosmology.ksig_params_z_get, _cosmology.ksig_params_z_set)
    def __init__(self): 
        """__init__(ksig_params self) -> ksig_params"""
        this = _cosmology.new_ksig_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_ksig_params
    __del__ = lambda self : None;
ksig_params_swigregister = _cosmology.ksig_params_swigregister
ksig_params_swigregister(ksig_params)

class projwp_params(_object):
    """Proxy of C++ projwp_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, projwp_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, projwp_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.projwp_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.projwp_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.projwp_params_cptr_get, _cosmology.projwp_params_cptr_set)
    __swig_setmethods__["R"] = _cosmology.projwp_params_R_set
    __swig_getmethods__["R"] = _cosmology.projwp_params_R_get
    if _newclass:R = _swig_property(_cosmology.projwp_params_R_get, _cosmology.projwp_params_R_set)
    __swig_setmethods__["z"] = _cosmology.projwp_params_z_set
    __swig_getmethods__["z"] = _cosmology.projwp_params_z_get
    if _newclass:z = _swig_property(_cosmology.projwp_params_z_get, _cosmology.projwp_params_z_set)
    def __init__(self): 
        """__init__(projwp_params self) -> projwp_params"""
        this = _cosmology.new_projwp_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_projwp_params
    __del__ = lambda self : None;
projwp_params_swigregister = _cosmology.projwp_params_swigregister
projwp_params_swigregister(projwp_params)

class rz_params(_object):
    """Proxy of C++ rz_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rz_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rz_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.rz_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.rz_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.rz_params_cptr_get, _cosmology.rz_params_cptr_set)
    __swig_setmethods__["z"] = _cosmology.rz_params_z_set
    __swig_getmethods__["z"] = _cosmology.rz_params_z_get
    if _newclass:z = _swig_property(_cosmology.rz_params_z_get, _cosmology.rz_params_z_set)
    __swig_setmethods__["tgt"] = _cosmology.rz_params_tgt_set
    __swig_getmethods__["tgt"] = _cosmology.rz_params_tgt_get
    if _newclass:tgt = _swig_property(_cosmology.rz_params_tgt_get, _cosmology.rz_params_tgt_set)
    def __init__(self): 
        """__init__(rz_params self) -> rz_params"""
        this = _cosmology.new_rz_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_rz_params
    __del__ = lambda self : None;
rz_params_swigregister = _cosmology.rz_params_swigregister
rz_params_swigregister(rz_params)

class z_params(_object):
    """Proxy of C++ z_params class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, z_params, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, z_params, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptr"] = _cosmology.z_params_cptr_set
    __swig_getmethods__["cptr"] = _cosmology.z_params_cptr_get
    if _newclass:cptr = _swig_property(_cosmology.z_params_cptr_get, _cosmology.z_params_cptr_set)
    __swig_setmethods__["mag"] = _cosmology.z_params_mag_set
    __swig_getmethods__["mag"] = _cosmology.z_params_mag_get
    if _newclass:mag = _swig_property(_cosmology.z_params_mag_get, _cosmology.z_params_mag_set)
    def __init__(self): 
        """__init__(z_params self) -> z_params"""
        this = _cosmology.new_z_params()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cosmology.delete_z_params
    __del__ = lambda self : None;
z_params_swigregister = _cosmology.z_params_swigregister
z_params_swigregister(z_params)

# This file is compatible with both classic and new-style classes.


